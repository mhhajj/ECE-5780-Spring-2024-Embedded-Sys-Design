/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

// Sine Wave: 8-bit, 32 samples/cycle
const uint8_t sine_table[32] = {127,151,175,197,216,232,244,251,254,251,244,
    232,216,197,175,151,127,102,78,56,37,21,9,2,0,2,9,21,37,56,78,102};
// Triangle Wave: 8-bit, 32 samples/cycle
const uint8_t triangle_table[32] = {0,15,31,47,63,79,95,111,127,142,158,174,
 190,206,222,238,254,238,222,206,190,174,158,142,127,111,95,79,63,47,31,15};
// Sawtooth Wave: 8-bit, 32 samples/cycle
const uint8_t sawtooth_table[32] = {0,7,15,23,31,39,47,55,63,71,79,87,95,103,
 111,119,127,134,142,150,158,166,174,182,190,198,206,214,222,230,238,246};
// Square Wave: 8-bit, 32 samples/cycle
const uint8_t square_table[32] = {254,254,254,254,254,254,254,254,254,254,
 254,254,254,254,254,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int16_t red = 6; 
int16_t blue = 7; 
int16_t orange = 8;
int16_t green = 9;

void init_led() {
    // Enable GPIOC clock
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    
    // Configure GPIOC pins for LED control
    GPIOC->MODER &= ~(GPIO_MODER_MODER6_Msk | GPIO_MODER_MODER7_Msk | GPIO_MODER_MODER8_Msk | GPIO_MODER_MODER9_Msk);
    GPIOC->MODER |= (GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0 | GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0);
    
    // Configure GPIOC output type
    GPIOC->OTYPER &= ~(GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
    
    // Configure GPIOC output speed
    GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED6_Msk | GPIO_OSPEEDR_OSPEED7_Msk | GPIO_OSPEEDR_OSPEED8_Msk | GPIO_OSPEEDR_OSPEED9_Msk);
    
    // Configure GPIOC pull-up/pull-down resistors
    GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR7_Msk | GPIO_PUPDR_PUPDR6_Msk | GPIO_PUPDR_PUPDR9_Msk | GPIO_PUPDR_PUPDR8_Msk);
}

void init_analog() {
    // Enable GPIOC clock for ADC
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    
    // Configure GPIOC pin PC0 for analog input
    GPIOC->MODER |= GPIO_MODER_MODER0_Msk;
    
    // Disable pull-up/pull-down resistors for PC0
    GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR0_Msk;
    
    // Enable GPIOA clock for DAC
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    
    // Configure GPIOA pin PA4 for analog output
    GPIOA->MODER |= GPIO_MODER_MODER4_Msk;
    
    // Disable pull-up/pull-down resistors for PA4
    GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR4_Msk;
}

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    init_led();
    init_analog();
    
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    RCC->APB1ENR |= RCC_APB1ENR_DACEN;
    ADC1->CFGR1 |= (1 << 4) | (1 << 13);
    ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
    DAC->SWTRIGR |= 1;
    DAC->CR |= 1;

    // Calibration sequence
    if (ADC1->CR & ADC_CR_ADEN) {
        ADC1->CR |= ADC_CR_ADDIS; // Disable ADC
    }
    while (ADC1->CR & ADC_CR_ADEN) {
        // Wait for ADC to be disabled
    }
    ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN; // Disable DMA
    ADC1->CR |= ADC_CR_ADCAL; // Start ADC calibration
    while (ADC1->CR & ADC_CR_ADCAL) {
        // Wait for ADC calibration to finish
    }
    ADC1->ISR |= ADC_ISR_ADRDY; // ADC ready
    ADC1->CR |= ADC_CR_ADEN; // Enable ADC
    while (!(ADC1->ISR & ADC_ISR_ADRDY)) {
        // Wait for ADC to be ready
    }
    ADC1->CR |= ADC_CR_ADSTART; // Start ADC conversion

    int i = 0;
    while (1) {
        i++;
        if (i >= 32)
            i = 0;
        HAL_Delay(1);
        DAC->DHR8R1 = sine_table[i];

        while (!(ADC1->ISR >> 2 & 1)) {
            // Wait for ADC conversion to complete
        }
        int16_t data = ADC1->DR;
        GPIOC->ODR = (GPIOC->ODR & ~(0xF << blue)) | ((data > 0x0000) << blue) |
                     ((data > 10) << green) | ((data > 20) << orange) | ((data > 30) << red);
    }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
