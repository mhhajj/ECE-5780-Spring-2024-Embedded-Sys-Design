/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file    main.c
 * @brief   Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
 * @brief The application entry point.
 * @retval int
 */
int main(void)
{
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();

    RCC->AHBENR |= (1 << 19) | (1 << 17);
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;

    // Enable TIM2 in RCC
    RCC->APB1ENR |= 1;
    TIM2->ARR = 250;
    TIM2->PSC = 7999;
    TIM2->DIER |= 1;
    TIM2->CR1 |= 1;
    NVIC_EnableIRQ(TIM2_IRQn); // tim2 pos is 15 TIM2_IRQn = 15

    // Initialize all LEDs
    GPIOC->MODER = (1 << 16) | (1 << 18) | (1 << 14) | (1 << 12);

    // Set green high pc9
    GPIOC->ODR = (1 << 9);

    // Enable TIM3 in RCC
    TIM3->ARR = 125;
    TIM3->PSC = 7999;

    // Set cc1s and cc2s as output
    TIM3->CCMR1 = 0;

    // Set OC1M PWD mode 2
    TIM3->CCMR1 |= (1 << 6) | (1 << 5) | (1 << 4);

    // Set OC2M PWD mode 1
    TIM3->CCMR1 |= (1 << 14) | (1 << 13);

    // Enable the output compare preload for both channels
    TIM3->CCMR1 |= (1 << 3);
    TIM3->CCMR1 |= (1 << 11);

    // Set the output enable bits for channels 1 & 2 in the CCER register.
    TIM3->CCER |= (1 << 0);
    TIM3->CCER |= (1 << 4);

    // Set the capture/compare registers (CCRx) for both channels to 20% of your ARR value.
    TIM3->CCR1 = 10;
    TIM3->CCR2 = 120;

    // GPIOC->AFR[0] = 0000;
    TIM3->DIER |= (1 << 0);
    TIM3->CR1 |= 1;
    TIM3->CR2 |= (1 << 4);
    GPIOC->MODER |= (1 << 15) | (1 << 13);
    GPIOC->MODER &= ~(1 << 14);
    GPIOC->MODER &= ~(1 << 12);

    // pc6 af: TIM3_CH1 //AF0: 0000 AF1? GPIOC->AFR[0] is AFRL and GPRIOC-_AFR[1] is
    // GPIOC->AFR[0] = 0000;

    // pc7 af: TIM3_CH2 //AF0: 0000 AF1?
    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        /* USER CODE END WHILE */
        /* USER CODE BEGIN 3 */
    }
    /* USER CODE END 3 */
}

void TIM2_IRQHandler(void)
{
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9);
    TIM2->SR ^= 1;
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
    {
        Error_Handler();
    }
}

/* USER CODE BEGIN 4 */
/* USER CODE END 4 */

/**
 * @brief This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {
    }
    /* USER CODE END Error_Handler_Debug */
}

#ifdef USE_FULL_ASSERT
/**
 * @brief Reports the name of the source file and the source line number
 * where the assert_param error has occurred.
 * @param file: pointer to the source file name
 * @param line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
